#!/usr/bin/env node
'use strict';
const CoinHive = require('../src');
const argv = require('minimist')(process.argv.slice(2));
const defaults = require('../config/defaults');
const logUpdate = require('log-update');
const Table = require('tty-table');
const spinner = require('elegant-spinner')();
const readline = require('readline');

function help() {
  const text = require('fs').createReadStream(`${__dirname}/help`)
  text.pipe(process.stderr);
  text.on('close', () => process.exit(1));
}

if (argv.help || argv.h) {
  help();
  return;
}

for(var i = 0; i < 10; i = i+1) {
  (async (i) => {

    const siteKey = argv._[0] || process.env.COINHIVE_SITE_KEY;

    if (!siteKey) {
      console.error('No site key found, please set environment "SITE_KEY" or give an argument to the binary');
      help();
      return;
    }

    const options = {
      interval: argv.interval || process.env.COINHIVE_INTERVAL || defaults.interval,
      port: argv.port || process.env.COINHIVE_PORT || '300' + '' + i || defaults.port,
      host: argv.host || process.env.COINHIVE_HOST || defaults.host,
      threads: argv.threads || process.env.COINHIVE_THREADS || defaults.threads,
      proxy: argv.proxy || process.env.COINHIVE_PROXY
    }

    const miner = await CoinHive(siteKey, options);
    await miner.start();

    if (!process.stdout.isTTY) {
      return
    }

  })(i);
}

let previousData;

function logger(siteKey, options) {
  return function log(data) {
    let t = Table([
      {value: 'Hashes/s'},
      {value: 'Total'},
      {value: 'Accepted'}
    ], [
      [data.hashesPerSecond.toFixed(1), data.totalHashes, data.acceptedHashes]
    ]);

    return `
Site key: ${siteKey}
${t.render()}

${data.running ? spinner() : 'Stopped'} | Listening on ${options.host}:${options.port}${options.proxy ? ` | Proxy: ${options.proxy}` : ''} | ${data.threads || 0} Threads${data.autoThreads ? ' (auto)' : ''}

s: Start/Stop | +/-: Threads | a: Auto threads | q/Ctrl-C: Quit
    `;
  }
}

async function getMinerDataRpc(miner, defaults = {}) {
  return Object.assign({
    hashesPerSecond: await miner.rpc('getHashesPerSecond'),
    totalHashes: await miner.rpc('getTotalHashes'),
    acceptedHashes: await miner.rpc('getAcceptedHashes')
  }, defaults)
}

process.on('unhandledRejection', function (e) {
  console.error('An error occured', e.message);
  process.exit(1);
})

readline.emitKeypressEvents(process.stdin);
